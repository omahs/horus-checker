(declare-fun $x () Int)
(declare-fun ADDR!1 () Int)
(declare-fun ADDR!2 () Int)
(declare-fun ADDR!3 () Int)
(declare-fun ADDR!4 () Int)
(declare-fun ADDR!5 () Int)
(declare-fun MEM!1 () Int)
(declare-fun MEM!2 () Int)
(declare-fun MEM!3 () Int)
(declare-fun MEM!4 () Int)
(declare-fun MEM!5 () Int)
(declare-fun ap!<root>@7 () Int)
(declare-fun fp!<root> () Int)
(declare-fun prime () Int)
(assert (and (<= 0 $x) (< $x prime)))
(assert (and (<= 0 ADDR!1) (< ADDR!1 prime)))
(assert (and (<= 0 ADDR!2) (< ADDR!2 prime)))
(assert (and (<= 0 ADDR!3) (< ADDR!3 prime)))
(assert (and (<= 0 ADDR!4) (< ADDR!4 prime)))
(assert (and (<= 0 ADDR!5) (< ADDR!5 prime)))
(assert (and (<= 0 MEM!1) (< MEM!1 prime)))
(assert (and (<= 0 MEM!2) (< MEM!2 prime)))
(assert (and (<= 0 MEM!3) (< MEM!3 prime)))
(assert (and (<= 0 MEM!4) (< MEM!4 prime)))
(assert (and (<= 0 MEM!5) (< MEM!5 prime)))
(assert (and (<= 0 ap!<root>@7) (< ap!<root>@7 prime)))
(assert (and (<= 0 fp!<root>) (< fp!<root> prime)))
(assert (= prime 3618502788666131213697322783095070105623107215331596699973092056135872020481))
(assert (=> (= ADDR!1 ADDR!2) (= MEM!1 MEM!2)))
(assert (=> (= ADDR!1 ADDR!3) (= MEM!1 MEM!3)))
(assert (=> (= ADDR!1 ADDR!4) (= MEM!1 MEM!4)))
(assert (=> (= ADDR!1 ADDR!5) (= MEM!1 MEM!5)))
(assert (=> (= ADDR!2 ADDR!3) (= MEM!2 MEM!3)))
(assert (=> (= ADDR!2 ADDR!4) (= MEM!2 MEM!4)))
(assert (=> (= ADDR!2 ADDR!5) (= MEM!2 MEM!5)))
(assert (=> (= ADDR!3 ADDR!4) (= MEM!3 MEM!4)))
(assert (=> (= ADDR!3 ADDR!5) (= MEM!3 MEM!5)))
(assert (=> (= ADDR!4 ADDR!5) (= MEM!4 MEM!5)))
(assert (= ADDR!1 (mod (+ fp!<root> (- 3)) prime)))
(assert (= ADDR!2 $x))
(assert (= ADDR!3 ap!<root>@7))
(assert (= ADDR!4 MEM!1))
(assert (= ADDR!5 (mod (+ ap!<root>@7 1) prime)))
(assert (<= fp!<root> ap!<root>@7))
(assert (and (= MEM!1 $x) (= 0 MEM!2) (= ap!<root>@7 fp!<root>)))
(assert (= MEM!4 MEM!3))
(assert (= MEM!3 0))
(assert (= 1 MEM!5))
(assert true)
(assert (not (= 1 MEM!5)))
(check-sat)